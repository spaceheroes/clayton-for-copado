<?xml version="1.0" encoding="UTF-8"?>
<ExternalServiceRegistration xmlns="http://soap.sforce.com/2006/04/metadata">
    <label>ClaytonScanAPI</label>
    <namedCredential>Clayton</namedCredential>
    <operations>
        <active>true</active>
        <name>createscansnapshot</name>
    </operations>
    <operations>
        <active>true</active>
        <name>dismissallpolicyissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>dismissallscanissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>dismissallscanpolicyruleissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>dismissscanruleissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>dismissselectedissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>exportpolicyproblems</name>
    </operations>
    <operations>
        <active>true</active>
        <name>exportpolicyproblemsx5f1</name>
    </operations>
    <operations>
        <active>true</active>
        <name>exportscanissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>exportscanruleproblems</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getbranches</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getpolicies</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getpolicy</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getpolicyproblems</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getpolicyrule</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getpolicyruleproblems</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getpolicyrules</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getrules</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getscan</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getscanissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getscanpolicyversionrulesarif</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getscanpolicyversionsarif</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getscanrule</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getscanruleproblems</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getscanrulesarif</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getscansarif</name>
    </operations>
    <operations>
        <active>true</active>
        <name>scanbybranch</name>
    </operations>
    <operations>
        <active>true</active>
        <name>scanbybranchandrevision</name>
    </operations>
    <operations>
        <active>true</active>
        <name>scanbydiff</name>
    </operations>
    <operations>
        <active>true</active>
        <name>scanbypullrequest</name>
    </operations>
    <operations>
        <active>true</active>
        <name>scanbyrevision</name>
    </operations>
    <operations>
        <active>true</active>
        <name>undismissallpolicyissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>undismissallscanissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>undismissallscanpolicyruleissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>undismissscanruleissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>undismissselectedissues</name>
    </operations>
    <operations>
        <active>true</active>
        <name>z0list</name>
    </operations>
    <schema>{
  &quot;openapi&quot;: &quot;3.0.1&quot;,
  &quot;info&quot;: {
    &quot;title&quot;: &quot;OpenAPI definition&quot;,
    &quot;version&quot;: &quot;v0&quot;
  },
  &quot;servers&quot;: [{
    &quot;url&quot;: &quot;http://clayton-local:5000&quot;,
    &quot;description&quot;: &quot;Generated server url&quot;
  }],
  &quot;paths&quot;: {
    &quot;/api/workspaces/{account}/projects/{project}/scans/snapshot&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;operationId&quot;: &quot;createScanSnapshot&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/ScanSnapshotForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/by_revision&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Trigger a scan for a given revision&quot;,
        &quot;operationId&quot;: &quot;scanByRevision&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/ScanByRevisionForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Scan&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/by_pull_request&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Trigger a scan for given Pull Request&quot;,
        &quot;operationId&quot;: &quot;scanByPullRequest&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/ScanByPullRequestForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/by_diff&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Trigger a scan for given diff between two branches&quot;,
        &quot;operationId&quot;: &quot;scanByDiff&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/ScanByDiffForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/PullRequest&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/by_branch_and_revision&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Trigger a scan for given branch/revision&quot;,
        &quot;operationId&quot;: &quot;scanByBranchAndRevision&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/ScanByBranchAndRevisionForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Scan&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        },
        &quot;deprecated&quot;: true
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/by_branch&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Trigger a scan for the current HEAD of a given branch&quot;,
        &quot;operationId&quot;: &quot;scanByBranch&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/ScanByBranchForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Scan&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/un_dismiss_all&quot;: {
      &quot;patch&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Un-dismiss all scan issues&quot;,
        &quot;operationId&quot;: &quot;unDismissAllScanIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/un_dismiss&quot;: {
      &quot;patch&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Un-dismiss selected scan issues&quot;,
        &quot;operationId&quot;: &quot;unDismissSelectedIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/IssueUnDismissForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/rules/{scanRuleId}/un_dismiss_all&quot;: {
      &quot;patch&quot;: {
        &quot;tags&quot;: [
          &quot;scan-rule-controller&quot;
        ],
        &quot;summary&quot;: &quot;Un-Dismiss all scan rule issues&quot;,
        &quot;operationId&quot;: &quot;unDismissScanRuleIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scanRuleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/PageIssue&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/rules/{scanRuleId}/dismiss_all&quot;: {
      &quot;patch&quot;: {
        &quot;tags&quot;: [
          &quot;scan-rule-controller&quot;
        ],
        &quot;summary&quot;: &quot;Dismiss all scan rule issues&quot;,
        &quot;operationId&quot;: &quot;dismissScanRuleIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scanRuleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/ProblemDismissAllForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/PageIssue&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/un_dismiss_all&quot;: {
      &quot;patch&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-controller&quot;
        ],
        &quot;summary&quot;: &quot;Un-Dismiss all scan policy issues&quot;,
        &quot;operationId&quot;: &quot;unDismissAllPolicyIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/rules/{ruleId}/un_dismiss_all&quot;: {
      &quot;patch&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-rule-controller&quot;
        ],
        &quot;summary&quot;: &quot;Un-Dismiss all scan policy rule issues&quot;,
        &quot;operationId&quot;: &quot;unDismissAllScanPolicyRuleIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;ruleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/rules/{ruleId}/dismiss_all&quot;: {
      &quot;patch&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-rule-controller&quot;
        ],
        &quot;summary&quot;: &quot;Dismiss all scan policy rule issues&quot;,
        &quot;operationId&quot;: &quot;dismissAllScanPolicyRuleIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;ruleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/ProblemDismissAllForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/dismiss_all&quot;: {
      &quot;patch&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-controller&quot;
        ],
        &quot;summary&quot;: &quot;Dismiss all scan policy issues&quot;,
        &quot;operationId&quot;: &quot;dismissAllPolicyIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/ProblemDismissAllForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/dismiss_all&quot;: {
      &quot;patch&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Dismiss all scan problems&quot;,
        &quot;operationId&quot;: &quot;dismissAllScanIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/ProblemDismissAllForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/dismiss&quot;: {
      &quot;patch&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Dismiss selected scan issues&quot;,
        &quot;operationId&quot;: &quot;dismissSelectedIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/ProblemDismissForm&quot;
              }
            }
          },
          &quot;required&quot;: true
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/sarif&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;operationId&quot;: &quot;getScanSarif&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;string&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/rules/{scanRuleId}/sarif&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-rule-controller&quot;
        ],
        &quot;operationId&quot;: &quot;getScanRuleSarif&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scanRuleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;string&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/rules/{scanRuleId}/problems&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-rule-controller&quot;
        ],
        &quot;summary&quot;: &quot;Get filtered and ordered scan rule paginated list of problems&quot;,
        &quot;operationId&quot;: &quot;getScanRuleProblems&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scanRuleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;severities&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Comma separated list of severities the problems list must have. Do not send at all, returns all problems.&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;error,critical&quot;
          },
          {
            &quot;name&quot;: &quot;search&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Filters list by given search string. We perform an insensitive LIKE operation over: rule name, rule problem description, rule rationale, rule benefit&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;developer&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced by a given developer&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;detected&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected in the list (default is true)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;dismissed&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected and then dismissed in the list (default is false)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: false
            }
          },
          {
            &quot;name&quot;: &quot;introduced_start&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced after a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;introduced_end&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced before a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;page&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Zero-based page index (0..N)&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 0
            }
          },
          {
            &quot;name&quot;: &quot;size&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;The size of the page to be returned&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 20
            }
          },
          {
            &quot;name&quot;: &quot;sort&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;array&quot;,
              &quot;items&quot;: {
                &quot;type&quot;: &quot;string&quot;
              }
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/PageIssue&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/rules/{scanRuleId}/export&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-rule-controller&quot;
        ],
        &quot;summary&quot;: &quot;Export filtered list of scan rule problems&quot;,
        &quot;operationId&quot;: &quot;exportScanRuleProblems&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scanRuleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;severities&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Comma separated list of severities the problems list must have. Do not send at all, returns all problems.&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;error,critical&quot;
          },
          {
            &quot;name&quot;: &quot;search&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Filters list by given search string. We perform an insensitive LIKE operation over: rule name, rule problem description, rule rationale, rule benefit&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;crud&quot;
          },
          {
            &quot;name&quot;: &quot;developer&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced by a given developer&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;detected&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected in the list (default is true)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;dismissed&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected and then dismissed in the list (default is false)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: false
            }
          },
          {
            &quot;name&quot;: &quot;introduced_start&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced after a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;introduced_end&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced before a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;format&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;default&quot;: &quot;csv&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/rules/{scanRuleId}&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-rule-controller&quot;
        ],
        &quot;operationId&quot;: &quot;getScanRule&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scanRuleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/ScanRule&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/rules&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-rule-controller&quot;
        ],
        &quot;summary&quot;: &quot;Get filtered and ordered paginated list of scan rules&quot;,
        &quot;operationId&quot;: &quot;getRules&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;search&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Filters list by given search string. We perform an insensitive LIKE operation over: rule name, rule problem, rule benefit, rule rationale&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;severities&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Comma separated list of default rule severities the problems in the list must have. Do not sending at all, returns all problems.&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;error,critical&quot;
          },
          {
            &quot;name&quot;: &quot;relevant&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only scan rules with at least a violation (default is false, include all)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: false
            }
          },
          {
            &quot;name&quot;: &quot;page&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Zero-based page index (0..N)&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 0
            }
          },
          {
            &quot;name&quot;: &quot;size&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;The size of the page to be returned&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 20
            }
          },
          {
            &quot;name&quot;: &quot;sort&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;array&quot;,
              &quot;items&quot;: {
                &quot;type&quot;: &quot;string&quot;
              }
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/PageScanRule&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/problems&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Get filtered and ordered scan paginated list of problems&quot;,
        &quot;operationId&quot;: &quot;getScanIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;severities&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Comma separated list of severities the problems list must have. Do not send at all, returns all problems.&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;error,critical&quot;
          },
          {
            &quot;name&quot;: &quot;search&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Filters list by given search string. We perform an insensitive LIKE operation over: rule name, rule problem description, rule rationale, rule benefit&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;crud&quot;
          },
          {
            &quot;name&quot;: &quot;developer&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced by a given developer&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;detected&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected in the list (default is true)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;dismissed&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected and then dismissed in the list (default is false)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: false
            }
          },
          {
            &quot;name&quot;: &quot;introduced_start&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced after a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;introduced_end&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced before a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;page&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Zero-based page index (0..N)&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 0
            }
          },
          {
            &quot;name&quot;: &quot;size&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;The size of the page to be returned&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 20
            }
          },
          {
            &quot;name&quot;: &quot;sort&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;array&quot;,
              &quot;items&quot;: {
                &quot;type&quot;: &quot;string&quot;
              }
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/PageIssue&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/sarif&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-controller&quot;
        ],
        &quot;operationId&quot;: &quot;getScanPolicyVersionSarif&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;string&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/rules/{ruleId}/sarif&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-rule-controller&quot;
        ],
        &quot;operationId&quot;: &quot;getScanPolicyVersionRuleSarif&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;ruleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;string&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/rules/{ruleId}/problems&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-rule-controller&quot;
        ],
        &quot;summary&quot;: &quot;Get filtered and ordered scan policy rule paginated list of problems&quot;,
        &quot;operationId&quot;: &quot;getPolicyRuleProblems&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;ruleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;severities&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Comma separated list of severities the problems list must have. Do not send at all, returns all problems.&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;search&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;filter list by given search string&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;developer&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced by a given developer&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;detected&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected in the list (default is true)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;dismissed&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected and then dismissed in the list (default is false)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: false
            }
          },
          {
            &quot;name&quot;: &quot;introduced_start&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced after a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;introduced_end&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced before a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;page&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Zero-based page index (0..N)&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 0
            }
          },
          {
            &quot;name&quot;: &quot;size&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;The size of the page to be returned&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 20
            }
          },
          {
            &quot;name&quot;: &quot;sort&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;array&quot;,
              &quot;items&quot;: {
                &quot;type&quot;: &quot;string&quot;
              }
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/PageIssue&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/rules/{ruleId}/export&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-rule-controller&quot;
        ],
        &quot;summary&quot;: &quot;Export filtered list of scan policy rule problems&quot;,
        &quot;operationId&quot;: &quot;exportPolicyProblems&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;ruleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;severities&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Comma separated list of severities the problems list must have. Do not send at all, returns all problems.&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;error,critical&quot;
          },
          {
            &quot;name&quot;: &quot;search&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Filters list by given search string. We perform an insensitive LIKE operation over: rule name, rule problem description, rule rationale, rule benefit&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;crud&quot;
          },
          {
            &quot;name&quot;: &quot;developer&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced by a given developer&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;detected&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected in the list (default is true)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;dismissed&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected and then dismissed in the list (default is false)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: false
            }
          },
          {
            &quot;name&quot;: &quot;introduced_start&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced after a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;introduced_end&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced before a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;format&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;default&quot;: &quot;csv&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/rules/{ruleId}&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-rule-controller&quot;
        ],
        &quot;operationId&quot;: &quot;getPolicyRule&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;ruleId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/ScanPolicyRule&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/rules&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-rule-controller&quot;
        ],
        &quot;summary&quot;: &quot;Get filtered and ordered paginated list of scan policy rules (scan policy rule aggregated items)&quot;,
        &quot;operationId&quot;: &quot;getPolicyRules&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;severities&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Comma separated list of severities the problems list must have. Do not send at all, returns all problems.&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;error,critical&quot;
          },
          {
            &quot;name&quot;: &quot;search&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Filters list by given search string. We perform an insensitive LIKE operation over: rule name, rule problem description, rule rationale, rule benefit&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;relevant&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only scan policy rules with at least a violation (default is false, include all)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: false
            }
          },
          {
            &quot;name&quot;: &quot;page&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Zero-based page index (0..N)&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 0
            }
          },
          {
            &quot;name&quot;: &quot;size&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;The size of the page to be returned&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 20
            }
          },
          {
            &quot;name&quot;: &quot;sort&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;array&quot;,
              &quot;items&quot;: {
                &quot;type&quot;: &quot;string&quot;
              }
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/PageScanPolicyRule&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/problems&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-controller&quot;
        ],
        &quot;summary&quot;: &quot;Get filtered and ordered scan policy paginated list of problems&quot;,
        &quot;operationId&quot;: &quot;getPolicyProblems&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;severities&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Comma separated list of severities the problems list must have. Do not send at all, returns all problems.&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;error,critical&quot;
          },
          {
            &quot;name&quot;: &quot;search&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Filters list by given search string. We perform an insensitive LIKE operation over: rule name, rule problem description, rule rationale, rule benefit&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;developer&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced by a given developer&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;detected&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected in the list (default is true)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;dismissed&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected and then dismissed in the list (default is false)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: false
            }
          },
          {
            &quot;name&quot;: &quot;introduced_start&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced after a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;introduced_end&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced before a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;page&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Zero-based page index (0..N)&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 0
            }
          },
          {
            &quot;name&quot;: &quot;size&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;The size of the page to be returned&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 20
            }
          },
          {
            &quot;name&quot;: &quot;sort&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;array&quot;,
              &quot;items&quot;: {
                &quot;type&quot;: &quot;string&quot;
              }
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/PageIssue&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}/export&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-controller&quot;
        ],
        &quot;summary&quot;: &quot;Export filtered list of scan policy problems&quot;,
        &quot;operationId&quot;: &quot;exportPolicyProblems_1&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;severities&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Comma separated list of severities the problems list must have. Do not send at all, returns all problems.&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;error,critical&quot;
          },
          {
            &quot;name&quot;: &quot;search&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Filters list by given search string. We perform an insensitive LIKE operation over: rule name, rule problem description, rule rationale, rule benefit&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;crud&quot;
          },
          {
            &quot;name&quot;: &quot;developer&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced by a given developer&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;detected&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected in the list (default is true)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;dismissed&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected and then dismissed in the list (default is false)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: false
            }
          },
          {
            &quot;name&quot;: &quot;introduced_start&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced after a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;introduced_end&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced before a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;format&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;default&quot;: &quot;csv&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies/{policyId}&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-controller&quot;
        ],
        &quot;operationId&quot;: &quot;getPolicy&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;policyId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/ScanPolicy&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/policies&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-policy-controller&quot;
        ],
        &quot;summary&quot;: &quot;Get filtered and ordered paginated list of scan policies&quot;,
        &quot;operationId&quot;: &quot;getPolicies&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;search&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Filters list by given search string. We perform an insensitive LIKE operation over: policy name, policy description&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;pageable&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Pageable&quot;
            }
          },
          {
            &quot;name&quot;: &quot;page&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Zero-based page index (0..N)&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 0
            }
          },
          {
            &quot;name&quot;: &quot;size&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;The size of the page to be returned&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;default&quot;: 20
            }
          },
          {
            &quot;name&quot;: &quot;sort&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;array&quot;,
              &quot;items&quot;: {
                &quot;type&quot;: &quot;string&quot;
              }
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/PageScanPolicy&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/export&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Export filtered list of scan problems&quot;,
        &quot;operationId&quot;: &quot;exportScanIssues&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;severities&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Comma separated list of severities the problems list must have. Do not send at all, returns all problems.&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;error,critical&quot;
          },
          {
            &quot;name&quot;: &quot;search&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Filters list by given search string. We perform an insensitive LIKE operation over: rule name, rule problem description, rule rationale, rule benefit&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;example&quot;: &quot;crud&quot;
          },
          {
            &quot;name&quot;: &quot;developer&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced by a given developer&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;detected&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected in the list (default is true)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: true
            }
          },
          {
            &quot;name&quot;: &quot;dismissed&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include all problems detected and then dismissed in the list (default is false)&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;boolean&quot;,
              &quot;default&quot;: false
            }
          },
          {
            &quot;name&quot;: &quot;introduced_start&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced after a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;introduced_end&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;Include only problems introduced before a given date&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;date&quot;
            }
          },
          {
            &quot;name&quot;: &quot;format&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;required&quot;: false,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;default&quot;: &quot;csv&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}/branches&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;summary&quot;: &quot;Get all branches known for a given scan&quot;,
        &quot;description&quot;: &quot;Get revision of a given scan and search for all known branches which have given revision.&quot;,
        &quot;operationId&quot;: &quot;getBranches&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/BranchLite&quot;
                  }
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans/{scan}&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;operationId&quot;: &quot;getScan&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;scan&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Scan&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/workspaces/{account}/projects/{project}/scans&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;scan-controller&quot;
        ],
        &quot;operationId&quot;: &quot;list&quot;,
        &quot;parameters&quot;: [{
            &quot;name&quot;: &quot;account&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;project&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          {
            &quot;name&quot;: &quot;pageable&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Pageable&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;OK&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/PageScan&quot;
                }
              }
            }
          },
          &quot;400&quot;: {
            &quot;description&quot;: &quot;Bad Request&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;401&quot;: {
            &quot;description&quot;: &quot;Unauthorized&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;402&quot;: {
            &quot;description&quot;: &quot;Payment Required&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;403&quot;: {
            &quot;description&quot;: &quot;Forbidden&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;405&quot;: {
            &quot;description&quot;: &quot;Method Not Allowed&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;406&quot;: {
            &quot;description&quot;: &quot;Not Acceptable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;429&quot;: {
            &quot;description&quot;: &quot;Too Many Requests&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;500&quot;: {
            &quot;description&quot;: &quot;Internal Server Error&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          },
          &quot;503&quot;: {
            &quot;description&quot;: &quot;Service Unavailable&quot;,
            &quot;content&quot;: {
              &quot;*/*&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Error&quot;
                }
              }
            }
          }
        }
      }
    }
  },
  &quot;components&quot;: {
    &quot;schemas&quot;: {
      &quot;Error&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;message&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;attributes&quot;: {
            &quot;type&quot;: &quot;object&quot;,
            &quot;additionalProperties&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        }
      },
      &quot;ScanSnapshotForm&quot;: {
        &quot;required&quot;: [
          &quot;until_date&quot;
        ],
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;until_date&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date&quot;
          },
          &quot;branch&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        }
      },
      &quot;ScanByRevisionForm&quot;: {
        &quot;required&quot;: [
          &quot;house_keeping&quot;,
          &quot;revision&quot;,
          &quot;stealth_mode&quot;,
          &quot;type&quot;
        ],
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;revision&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;type&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;FULL&quot;,
              &quot;QUICK&quot;,
              &quot;AUTO&quot;
            ]
          },
          &quot;stealth_mode&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;house_keeping&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;ReportStats&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;elapsed_time&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;time_to_result&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;lines_per_second&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          }
        }
      },
      &quot;Revision&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;sha&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;short_sha&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;html_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;comment&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;date_committed&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;date_committed_raw&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;committer&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;author&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;is_scanned&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;last_scan&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/ScanLite&quot;
          },
          &quot;date_committed_description&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;avatar&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        }
      },
      &quot;Scan&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;type&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;FULL&quot;,
              &quot;QUICK&quot;,
              &quot;AUTO&quot;
            ]
          },
          &quot;html_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;enqueued_date&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;completed_date&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;stats&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/ReportStats&quot;
          },
          &quot;triggering_event&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;MANUAL&quot;,
              &quot;WEBHOOK&quot;,
              &quot;SCHEDULED&quot;,
              &quot;MERGE&quot;,
              &quot;PR_TRACKED&quot;,
              &quot;MIGRATION&quot;,
              &quot;BASELINE&quot;
            ]
          },
          &quot;status&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;QUEUED&quot;,
              &quot;PROCESSING&quot;,
              &quot;READY&quot;,
              &quot;ERROR&quot;
            ]
          },
          &quot;visibility&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;ACCESSIBLE&quot;,
              &quot;HARD_LOCK&quot;,
              &quot;PAY_PER_SCAN&quot;,
              &quot;DEMO&quot;
            ]
          },
          &quot;result&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PASSED&quot;,
              &quot;PASSED_WITH_WARNINGS&quot;,
              &quot;NOT_PASSED&quot;
            ]
          },
          &quot;status_check&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PENDING&quot;,
              &quot;PASSED&quot;,
              &quot;NOT_PASSED&quot;,
              &quot;ERROR&quot;
            ]
          },
          &quot;obsolete&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;problems&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;revision&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Revision&quot;
          },
          &quot;metrics&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/ScanMetrics&quot;
          },
          &quot;scan_policies&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/ScanPolicyLite&quot;
            }
          },
          &quot;default_scan_policy_id&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;sarif_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;task&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/TaskLite&quot;
          },
          &quot;status_check_issue_behavior&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;ALL&quot;,
              &quot;REFERENCE_DATE&quot;
            ]
          },
          &quot;status_check_issue_reference_date&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        }
      },
      &quot;ScanLite&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;completed_date&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;problems&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;html_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;obsolete&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;status_check&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PENDING&quot;,
              &quot;PASSED&quot;,
              &quot;NOT_PASSED&quot;,
              &quot;ERROR&quot;
            ]
          },
          &quot;result&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PASSED&quot;,
              &quot;PASSED_WITH_WARNINGS&quot;,
              &quot;NOT_PASSED&quot;
            ]
          },
          &quot;score&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;scan_policies&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/ScanPolicyLite&quot;
            }
          },
          &quot;global_scan_result_message&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;status&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;QUEUED&quot;,
              &quot;PROCESSING&quot;,
              &quot;READY&quot;,
              &quot;ERROR&quot;
            ]
          },
          &quot;task&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/TaskLite&quot;
          }
        }
      },
      &quot;ScanMetrics&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;score&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;remediation_effort&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;violation_count&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;defect_density&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;accumulation_rate&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;capacity_leakage&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;code_to_config_ratio&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;lines_of_code&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          }
        }
      },
      &quot;ScanPolicyLite&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;title&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;description&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;html_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;problems&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;score&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;remediation_effort&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;defect_density&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;result&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PASSED&quot;,
              &quot;PASSED_WITH_WARNINGS&quot;,
              &quot;NOT_PASSED&quot;
            ]
          },
          &quot;status_check&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PENDING&quot;,
              &quot;PASSED&quot;,
              &quot;NOT_PASSED&quot;,
              &quot;ERROR&quot;
            ]
          },
          &quot;sarif_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;issue_details&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;AVAILABLE&quot;,
              &quot;PAYWALL&quot;,
              &quot;UNAVAILABLE&quot;
            ]
          }
        }
      },
      &quot;TaskLite&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;status&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;FUTURE&quot;,
              &quot;THROTTLED&quot;,
              &quot;ACCEPTED&quot;,
              &quot;PROCESSING&quot;,
              &quot;PROCESSED&quot;
            ]
          },
          &quot;outcome&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;SUCCESS&quot;,
              &quot;ERROR&quot;,
              &quot;PENDING&quot;,
              &quot;CANCELLED&quot;,
              &quot;ABORTED&quot;,
              &quot;INTERRUPTED&quot;
            ]
          },
          &quot;cancellation_requested&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;ScanByPullRequestForm&quot;: {
        &quot;required&quot;: [
          &quot;house_keeping&quot;,
          &quot;pull_request_number&quot;,
          &quot;stealth_mode&quot;
        ],
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;pull_request_number&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;stealth_mode&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;house_keeping&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;ScanByDiffForm&quot;: {
        &quot;required&quot;: [
          &quot;branch_source&quot;,
          &quot;branch_target&quot;,
          &quot;house_keeping&quot;,
          &quot;stealth_mode&quot;
        ],
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;branch_source&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;branch_target&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;stealth_mode&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;house_keeping&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;BranchLite&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;name&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;is_processing&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;html_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;last_scan_result&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PASSED&quot;,
              &quot;PASSED_WITH_WARNINGS&quot;,
              &quot;NOT_PASSED&quot;
            ]
          }
        }
      },
      &quot;LegacyPullRequestReviewLite&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;created_date&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;obsolete&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;published&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;pull_request_review_report&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/LegacyPullRequestReviewReport&quot;
          }
        }
      },
      &quot;LegacyPullRequestReviewReport&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;from_revision&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Revision&quot;
          },
          &quot;to_revision&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Revision&quot;
          },
          &quot;report_policies&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/PullRequestReviewReportPolicyVersionLite&quot;
            }
          },
          &quot;default_report_policy_id&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;metrics&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PullRequestMetrics&quot;
          },
          &quot;report_type&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;DIFF&quot;,
              &quot;SCAN&quot;
            ]
          },
          &quot;task&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/TaskLite&quot;
          }
        }
      },
      &quot;PullRequest&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;number&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;title&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;date_opened&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;date_closed&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;opened_by&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;closed_by&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;approval&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PENDING&quot;,
              &quot;APPROVED&quot;,
              &quot;NOT_APPROVED&quot;
            ]
          },
          &quot;branch_from&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/BranchLite&quot;
          },
          &quot;branch_to&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/BranchLite&quot;
          },
          &quot;html_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;last_comparison_result&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PASSED&quot;,
              &quot;PASSED_WITH_WARNINGS&quot;,
              &quot;NOT_PASSED&quot;
            ]
          },
          &quot;is_processing&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;last_review_result&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PASSED&quot;,
              &quot;PASSED_WITH_WARNINGS&quot;,
              &quot;NOT_PASSED&quot;
            ]
          },
          &quot;last_pull_request_review&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/LegacyPullRequestReviewLite&quot;
          },
          &quot;last_pull_request_review_report&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PullRequestReviewReport&quot;
          },
          &quot;contributors&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/PullRequestContributor&quot;
            }
          },
          &quot;task&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/TaskLite&quot;
          }
        }
      },
      &quot;PullRequestContributor&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;email&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;avatar&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;last_commit_date&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        }
      },
      &quot;PullRequestLite&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;created_date&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;obsolete&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;published&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;PullRequestMetrics&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;violation_count&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          }
        }
      },
      &quot;PullRequestReviewReport&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;from_revision&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Revision&quot;
          },
          &quot;to_revision&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Revision&quot;
          },
          &quot;report_policies&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/PullRequestReviewReportPolicyVersionLite&quot;
            }
          },
          &quot;default_report_policy_id&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;metrics&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PullRequestMetrics&quot;
          },
          &quot;report_type&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;DIFF&quot;,
              &quot;SCAN&quot;
            ]
          },
          &quot;task&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/TaskLite&quot;
          },
          &quot;status&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;QUEUED&quot;,
              &quot;PROCESSING&quot;,
              &quot;READY&quot;,
              &quot;ERROR&quot;
            ]
          },
          &quot;obsolete&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;last_pull_request_review&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PullRequestLite&quot;
          }
        }
      },
      &quot;PullRequestReviewReportPolicyVersionLite&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;title&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;description&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;html_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;problems&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;result&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PASSED&quot;,
              &quot;PASSED_WITH_WARNINGS&quot;,
              &quot;NOT_PASSED&quot;
            ]
          },
          &quot;issue_details&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;AVAILABLE&quot;,
              &quot;PAYWALL&quot;,
              &quot;UNAVAILABLE&quot;
            ]
          }
        }
      },
      &quot;ScanByBranchAndRevisionForm&quot;: {
        &quot;required&quot;: [
          &quot;branch&quot;,
          &quot;house_keeping&quot;,
          &quot;revision&quot;,
          &quot;stealth_mode&quot;,
          &quot;type&quot;
        ],
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;branch&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;revision&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;type&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;FULL&quot;,
              &quot;QUICK&quot;,
              &quot;AUTO&quot;
            ]
          },
          &quot;stealth_mode&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;house_keeping&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;ScanByBranchForm&quot;: {
        &quot;required&quot;: [
          &quot;branch&quot;,
          &quot;house_keeping&quot;,
          &quot;stealth_mode&quot;,
          &quot;type&quot;
        ],
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;branch&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;type&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;FULL&quot;,
              &quot;QUICK&quot;,
              &quot;AUTO&quot;
            ]
          },
          &quot;stealth_mode&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;house_keeping&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;IssueUnDismissForm&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;issue_ids&quot;: {
            &quot;uniqueItems&quot;: true,
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;uuid&quot;
            }
          }
        }
      },
      &quot;Blame&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;sha&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;short_sha&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;commit_comment&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;contributor&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/BlameContributor&quot;
          },
          &quot;html_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;line&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;date&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        }
      },
      &quot;BlameContributor&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;email&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;avatar&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        }
      },
      &quot;Issue&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;problem_id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;type&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;NEW_DEVELOPMENTS&quot;,
              &quot;LEGACY_CODE&quot;
            ]
          },
          &quot;relative_path&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;rule_unit_id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;blame&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Blame&quot;
          },
          &quot;comment_body&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;external_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;details_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;problem_name_singular&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;severity&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;WARNING&quot;,
              &quot;ERROR&quot;,
              &quot;CRITICAL&quot;
            ]
          },
          &quot;rationale&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;name&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;remediation_effort&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;source&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;resources&quot;: {
            &quot;type&quot;: &quot;object&quot;,
            &quot;additionalProperties&quot;: {
              &quot;type&quot;: &quot;array&quot;,
              &quot;items&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/RuleResource&quot;
              }
            }
          },
          &quot;info&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/ProblemInfo&quot;
          },
          &quot;change_type&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;FIX&quot;,
              &quot;ADD&quot;
            ]
          },
          &quot;change_revision&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        }
      },
      &quot;PageIssue&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;total_elements&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;total_pages&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;number_of_elements&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;pageable&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PageableObject&quot;
          },
          &quot;sort&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/SortObject&quot;
          },
          &quot;size&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;content&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Issue&quot;
            }
          },
          &quot;number&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;first&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;last&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;empty&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;PageableObject&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;page_number&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;page_size&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;paged&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;unpaged&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;sort&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/SortObject&quot;
          },
          &quot;offset&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          }
        }
      },
      &quot;ProblemInfo&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;is_dismissed&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;reason&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;comment&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;date&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;reporter&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/UserLite&quot;
          }
        }
      },
      &quot;RuleResource&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;title&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;authority&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        }
      },
      &quot;SortObject&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;unsorted&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;sorted&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;empty&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;UserLite&quot;: {
        &quot;required&quot;: [
          &quot;email&quot;,
          &quot;id&quot;,
          &quot;username&quot;
        ],
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;name&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;username&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;email&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;avatar&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;locale&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;active&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;last_login_date&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;email_verified&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;ProblemDismissAllForm&quot;: {
        &quot;required&quot;: [
          &quot;comment&quot;,
          &quot;reason&quot;
        ],
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;comment&quot;: {
            &quot;maxLength&quot;: 255,
            &quot;minLength&quot;: 0,
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;reason&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;FALSE_POSITIVE&quot;,
              &quot;USED_IN_TEST&quot;,
              &quot;WONT_FIX&quot;
            ]
          }
        }
      },
      &quot;ProblemDismissForm&quot;: {
        &quot;required&quot;: [
          &quot;comment&quot;,
          &quot;reason&quot;
        ],
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;issue_ids&quot;: {
            &quot;uniqueItems&quot;: true,
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;uuid&quot;
            }
          },
          &quot;problem_ids&quot;: {
            &quot;uniqueItems&quot;: true,
            &quot;type&quot;: &quot;array&quot;,
            &quot;deprecated&quot;: true,
            &quot;items&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;uuid&quot;
            }
          },
          &quot;comment&quot;: {
            &quot;maxLength&quot;: 255,
            &quot;minLength&quot;: 0,
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;reason&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;FALSE_POSITIVE&quot;,
              &quot;USED_IN_TEST&quot;,
              &quot;WONT_FIX&quot;
            ]
          }
        }
      },
      &quot;Metrics&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;score&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;remediation_effort&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;violation_count&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;defect_density&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          }
        }
      },
      &quot;Rule&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;key&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;name&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;category&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;benefit&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;problem&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;problem_singular&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;problem_plural&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;severity&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;rationale&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;rule_type&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;cwe_ids&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          &quot;rule_units&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          },
          &quot;plain_text_message&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;markdown_message&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;expected_resolution_time&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;availability&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;GA&quot;,
              &quot;DRAFT&quot;
            ]
          },
          &quot;tags&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/RuleTag&quot;
            }
          }
        }
      },
      &quot;RuleTag&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;category&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;description&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        }
      },
      &quot;ScanRule&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;rule&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Rule&quot;
          },
          &quot;result&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PASSED&quot;,
              &quot;PASSED_WITH_WARNINGS&quot;,
              &quot;NOT_PASSED&quot;
            ]
          },
          &quot;status_check&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PENDING&quot;,
              &quot;PASSED&quot;,
              &quot;NOT_PASSED&quot;,
              &quot;ERROR&quot;
            ]
          },
          &quot;metrics&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Metrics&quot;
          },
          &quot;sarif_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;issue_details&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;AVAILABLE&quot;,
              &quot;PAYWALL&quot;,
              &quot;UNAVAILABLE&quot;
            ]
          },
          &quot;severities_overrides&quot;: {
            &quot;uniqueItems&quot;: true,
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        }
      },
      &quot;PageScanRule&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;total_elements&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;total_pages&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;number_of_elements&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;pageable&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PageableObject&quot;
          },
          &quot;sort&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/SortObject&quot;
          },
          &quot;size&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;content&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/ScanRule&quot;
            }
          },
          &quot;number&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;first&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;last&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;empty&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;PolicyVersionRuleEntry&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;rule_id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;is_enabled&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;is_staged&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;name&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;description&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;benefit&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;reason&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;is_override_permitted&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;severity&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;message_template&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;comment_template&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;expected_resolution_time&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;attributes&quot;: {
            &quot;type&quot;: &quot;object&quot;,
            &quot;additionalProperties&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        }
      },
      &quot;ScanPolicyRule&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;rule&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PolicyVersionRuleEntry&quot;
          },
          &quot;result&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PASSED&quot;,
              &quot;PASSED_WITH_WARNINGS&quot;,
              &quot;NOT_PASSED&quot;
            ]
          },
          &quot;status_check&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PENDING&quot;,
              &quot;PASSED&quot;,
              &quot;NOT_PASSED&quot;,
              &quot;ERROR&quot;
            ]
          },
          &quot;metrics&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Metrics&quot;
          },
          &quot;sarif_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;issue_details&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;AVAILABLE&quot;,
              &quot;PAYWALL&quot;,
              &quot;UNAVAILABLE&quot;
            ]
          }
        }
      },
      &quot;PageScanPolicyRule&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;total_elements&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;total_pages&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;number_of_elements&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;pageable&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PageableObject&quot;
          },
          &quot;sort&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/SortObject&quot;
          },
          &quot;size&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;content&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/ScanPolicyRule&quot;
            }
          },
          &quot;number&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;first&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;last&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;empty&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;PolicyDefinition&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;name&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;description&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;visibility&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;status&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;is_official&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;publisher&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PolicyPublisher&quot;
          }
        }
      },
      &quot;PolicyPublisher&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;name&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;avatar_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        }
      },
      &quot;ScanPolicy&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;title&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;html_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;definition&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PolicyDefinition&quot;
          },
          &quot;metrics&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Metrics&quot;
          },
          &quot;result&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PASSED&quot;,
              &quot;PASSED_WITH_WARNINGS&quot;,
              &quot;NOT_PASSED&quot;
            ]
          },
          &quot;status_check&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PENDING&quot;,
              &quot;PASSED&quot;,
              &quot;NOT_PASSED&quot;,
              &quot;ERROR&quot;
            ]
          },
          &quot;sarif_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;rules&quot;: {
            &quot;uniqueItems&quot;: true,
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/ScanPolicyRuleLite&quot;
            }
          }
        }
      },
      &quot;ScanPolicyRuleLite&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;rule_name&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;result&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PASSED&quot;,
              &quot;PASSED_WITH_WARNINGS&quot;,
              &quot;NOT_PASSED&quot;
            ]
          },
          &quot;status_check&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;enum&quot;: [
              &quot;PENDING&quot;,
              &quot;PASSED&quot;,
              &quot;NOT_PASSED&quot;,
              &quot;ERROR&quot;
            ]
          },
          &quot;sarif_url&quot;: {
            &quot;type&quot;: &quot;string&quot;
          }
        }
      },
      &quot;Pageable&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;page&quot;: {
            &quot;minimum&quot;: 0,
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;size&quot;: {
            &quot;minimum&quot;: 1,
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;sort&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        }
      },
      &quot;PageScanPolicy&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;total_elements&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;total_pages&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;number_of_elements&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;pageable&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PageableObject&quot;
          },
          &quot;sort&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/SortObject&quot;
          },
          &quot;size&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;content&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/ScanPolicy&quot;
            }
          },
          &quot;number&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;first&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;last&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;empty&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      },
      &quot;PageScan&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;total_elements&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;total_pages&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;number_of_elements&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;pageable&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/PageableObject&quot;
          },
          &quot;sort&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/SortObject&quot;
          },
          &quot;size&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;content&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Scan&quot;
            }
          },
          &quot;number&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;first&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;last&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;empty&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        }
      }
    }
  }
}</schema>
    <schemaType>OpenApi3</schemaType>
    <status>Complete</status>
</ExternalServiceRegistration>
